{"pages":[{"title":"关于我","date":"2019-09-04T06:42:42.000Z","path":"about/index.html","text":"姓名：王建峰 家乡：蚌埠 居住：北京 现状：在职 爱好：读书、健身、编程、看电影。 口号：永远相信美好的事情即将发生。 技能：能够熟练掌握一门技术，了解多门编程语言,能快速实现一个功能，成为一名合格的工程师 博客：通过读一些优秀的博客，感到佩服，也希望能够写出高质量的博客(能将内容阐述清晰，有自己的思想) 阅读：多读一些优秀的作品和书籍，有机会能交流一下也是不错的"},{"title":"Categories","date":"2020-03-15T04:45:57.676Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2020-03-15T04:45:57.676Z","path":"tags/index.html","text":""}],"posts":[{"title":"小狗钱钱阅读笔记","date":"2020-03-16T23:42:42.000Z","path":"wiki/生活学习-读书笔记-小狗钱钱/","text":"这本书的重点内容： 怎么攒钱？开始储蓄，迈出财富积累的第一步 怎么挣钱？付出劳动，挣出第一桶金 怎么用钱生钱？学会投资，养一只会下金蛋的鹅 怎么攒钱？ 攒钱这件事要从哪开始呢？小狗钱钱说，首先要从你脑子里的想法开始。我们首先要正确地认识钱，金钱既不是万能的，也不是万恶之源，它本身没有好坏之分，只是商品流通的媒介。金钱就像一个放大镜，它只是充分展示了人性本来的样子。一个幸福的人有了钱，会更加快乐；一个悲观的人有了钱，会更加忧虑。像比尔·盖茨、扎克伯格这样的人，有了钱，会捐出巨资，帮助他人。而像伊斯兰国这样的恐怖组织，会用钱去购买武器，伤害无辜。 你是什么样的人？如果有了钱，你会去做什么？对我们大多数人来说，有了钱，可以提高生活质量，去实现更多的梦想。反之，越是缺钱，我们就越容易被它牵制。小狗钱钱说，吉娅的父母之所以不停地谈钱，就是因为他们的经济状况太糟糕了，好比一个人掉进水里，随时可能会被淹没。 梦想清单 用笔写下10个你想变得富有的理由，越具体越好，然后从中挑出三个最重要的。在书里，吉娅挑出的3个理由包括，作为交换生去美国，买一台电脑，以及帮助爸妈还清债务。 梦想相册 那怎么制作梦想相册呢？比如，吉娅想去美国当交换生，她就在相册里贴上迪士尼乐园、自由女神像的照片。相册做完后，吉娅也没有束之高阁，而是每天都看几遍，想象自己在美国认识新的朋友，看到各种新鲜事物。这种方式让吉娅充满了攒钱的动力。 梦想储蓄罐 存钱可以让我们避免不必要的花费，做到量入为出。比如吉娅为了存钱，克制住了自己的欲望，没有直接用一个月的零花钱来买一张CD；而且存起来的钱，无论是放到银行还是买理财产品，都可以让你享受到复利、也就是利滚利的好处。这点非常关键。 在这本书里，小狗钱钱给吉娅的建议是 5-4-1原则，就是说，除了最必要的日常开销，剩余的收入分成10份，其中五份用来投资，四份放在梦想储蓄罐里，一份当作奖励自己的零花钱。哪怕你每个月日常开销以后只剩100块，也可以按照5-4-1原则来分配 这就是让你开始攒钱的三个步骤，制作梦想清单、梦想相册和梦想储蓄罐。一旦开始储蓄，你就迈出了财富积累的第一步 PS:如果一个人出现资产负债的话，又谈何财富积累呢？ 走出负债 停掉手中所有的信用卡 在允许范围内，尽量按照较低的分期付款数目标准来支付 边攒钱边还消费贷款 那就是每次在付款之前，都再问自己一句“这真的有必要吗？” 小结：以上我们着重讲了财富积累的第一步，储蓄。想要获得财富，首先我们必须牢牢树立攒钱的意识。本书为我们介绍了开始攒钱的三个步骤，制作梦想清单、梦想相册和梦想储蓄罐。同时，针对有债务困扰的人，小狗钱钱也给了我们四点忠告，分别是：停掉所有信用卡、按照较低分期付款标准支付贷款、攒钱还款两不误，以及每次花钱之前，问问自己“这真的有必要吗”。 怎么挣钱？ 小狗钱钱先告诉吉娅要攒下零花钱，但是零花钱只有那么一点，为了实现去美国当交换生的梦想，吉娅还要攒更多的钱才行，于是她开始琢磨怎么挣钱。 一个12岁的小女孩能做什么呢？吉娅自己也非常茫然。这和我们大部分人的情况很像，我们都想赚钱，但怎么赚呢？ 赚钱法则 你得为别人解决一个难题； 你要把精力集中在你知道的、能做的和拥有的事情上。 PS:做自己擅长和喜欢的事情，这件事情要给别人带来价值。 写成功日记 每天花10分钟，写下你这一天的五个成果。千万别被“成功”这两个字误导了，你所记录的这些事情，不一定非得多重要，任何芝麻蒜皮的小事都可以写进去。比如，吉娅在第一次写成功日记时写道：今天我学习了挣钱的知识，攒了5马克钱，还制作了梦想相册。 怎么理财？ 什么是“会下金蛋的鹅”呢？书里说，从前有个农夫，他养了一只鹅。有一天，他在笼子里发现了一只金蛋，于是他把这只金蛋卖了，得到了很多钱。第二天笼子里又有了一个金蛋。这样的好运持续了好几天。可是贪得无厌的农夫依然不知足，他认为这只鹅下金蛋的速度太慢了。于是，一怒之下，他把鹅劈成了两半。就这样，他的鹅死了，再也没法下金蛋了。 在这个故事里，“鹅”代表本金，它下的“金蛋”代表利息，用本金获取利息，也就是用钱生钱。在这个过程里，这个金蛋也被叫做是“被动收入”。就是说，你不用付出任何劳动，就能自动获得的收入，比如，银行存款的利息，出租房子的租金、出书的版税、股票的分红等等。 PS:&quot;被动收入&quot;是实现财务自由的关键因素 股票与基金 股票:大家对股票更熟悉一点，你买了这家公司的股票，就成了它的股东，每年可以享受分红。而且，你可以在证券市场上买进或是卖出股票。当然，作者说的欧美股票市场，和我们国家的股市，在规范程度和投资回报上都有所不同，借鉴意义有限，所以我们点到为止。 基金:基金就像一口大锅，投资者可以把自己的钱投进这口锅里，然后由基金经理人，帮大家投资买股票。你只需要付给经理人一定的佣金就行。因为基金这口锅里，有多种不同股票，里面某只股票的涨跌已经被分散稀释，所以风险比股票小，当然收益也相对比较少。但是从长期来看，找到稳定上涨的基金，投资5-10年，它就相当于是零风险，而且你的收益将会非常可观。 如何挑选基金 有10年以上历史的基金更值得购买。既然它在过去长期保持丰厚的利润，那么未来也是可以预期的。 选择大型的跨国股票基金。这种基金在全球范围内选取股票，风险比较低。 对比过去10年间，各种基金年终利润的走势图，选出最好的来投。 计算收益(72法则) 如何知道你投资的钱多长时间能翻一倍呢？:用 72除以一项投资的年收益率，得出的数字就是这笔钱翻一倍，所用的时间。比如，你买了一款年收益为6%的理财产品，用72除以6等于12，就是说，12年之后这笔钱就翻了一倍。 一笔钱多长时间会贬值二分之一:同理，用72除以通货膨胀率，得出的数字就是这笔钱贬值到只剩一半的时间。比如，通货膨胀率是6%，那么72除以6就等于12，也就是说12年后，你的100块钱就只能买现在50块钱的东西了。对理财新手来说，72法则是一个简单好用的工具。 规避风险 不要把鸡蛋都放在同一个篮子里:把你手头的资金分配在不同的投资方式，而且这些投资方式的回报率之间关联性越低越好 总结 要牢牢树立储蓄的意识，有的理财书籍建议每个月拿出收入的50%作为储蓄，对很多人来说，这个很难做到。那不妨从10%开始，每月发了工资，立马分出10%作为储蓄，如果能按月坚持，你就迈出了财富积累的第一步。不管你目前是否负债，储蓄这件事最好都要开始做、坚持做。 要开源节流，就是要增加收入、控制消费。想要挣钱，就要为别人解决一个难题，这件事最好是你擅长的、喜欢的。有了收入，还要控制消费。因为消费通常会随着收入，水涨船高，人们甚至会超前消费，为了消费而去负债，比如，花信用卡、申请消费贷款等等。作者建议，量入为出，一定要避免不必要的消费 有了一定的储蓄，就达到了投资的门槛。投资就是要养一只会下金蛋的鹅。《小狗钱钱》建议吉娅设立一个金鹅账户，就是会下金蛋的鹅，可以按照5-4-1的原则，把每个月可支配收入的50%存入金鹅账户，用来投资，用钱生钱","tags":[{"name":"book","slug":"book","permalink":"hinzer.github.io/tags/book/"}],"categories":[{"name":"生活学习","slug":"生活学习","permalink":"hinzer.github.io/categories/生活学习/"},{"name":"读书笔记","slug":"生活学习/读书笔记","permalink":"hinzer.github.io/categories/生活学习/读书笔记/"}]},{"title":"ctags基本用法","date":"2020-03-15T23:46:33.000Z","path":"wiki/技术开发-开发工具-ctags/","text":"ctags是方便阅读源代码的工具。开发者在linux平台下和vim编辑器配合使用,这种策略经常被用于linux源码阅读。 开发环境 123Ubuntu18.04hinzer@ubuntu:~$ uname -aLinux ubuntu 5.3.0-40-generic #32~18.04.1-Ubuntu SMP Mon Feb 3 14:05:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux 关于2.6.11版本的kernel源码下载 12hinzer@ubuntu:source$ wget -O kernel https://mirrors.edge.kernel.org/pub/linux/kernel/v2.6/linux-2.6.11.tar.gzhinzer@ubuntu:source$ tar -xzvf kernel.tar.gz 安装 1sudo apt-get install ctags -y 配置 在当前目录下生成索引文件 12hinzer@ubuntu:source$ cd linux-2.6.11/hinzer@ubuntu:linux-2.6.11$ ctags -R . #生成索引tags sudo vim /etc/vim/vimrc配置vim 1hinzer@ubuntu:~$ sudo vim ~/.vimrc #添加 set tags=/home/hinzer/source/linux-2.6.11/tags; 使用演示 命令行索引tag 123hinzer@ubuntu:linux-2.6.11$ ctags -R . #生成索引tagshinzer@ubuntu:linux-2.6.11$ ll tagshinzer@ubuntu:linux-2.6.11$ vim -t main #查找main函数 vim中使用ctags命令 12345:ts #tagslist,列出索引list:tp #tagspreview 上一个tag:tn #tagsnext 下一个tagCtrl+ ] #通过光标位置 跳转到定义处Ctrl+ T #返回上一步的光标位置 参考资料 百度百科ctags linux kernel","tags":[{"name":"ctags","slug":"ctags","permalink":"hinzer.github.io/tags/ctags/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"hinzer.github.io/categories/技术开发/"},{"name":"开发工具","slug":"技术开发/开发工具","permalink":"hinzer.github.io/categories/技术开发/开发工具/"}]},{"title":"Welcome hinzer's Wiki Site","date":"2020-03-14T17:55:57.000Z","path":"wiki/index/","text":"关于wiki 知识是自己构建的，不是搬运来的。建立个人wiki的目的是将此作为一个知识整理的平台，虽然维基百科已经足够好了，但终究不是自己的，希望能建立自己的知识库(也可以理解为对已有知识的二次整理)。 万丈高楼平地起，起步阶段咱也不需要写的多好，随着理解的慢慢深入，自然能写出高水准的wiki。 这是一个基于Hexo框架的Wiki系统，Hexo是开源框架同时也支持很多主题，这里就采用了Wikitten的主题样式。然而我不关心这个，当然也不擅长这个(大佬们做好的轮子，拿来用就好了)。 组织结构 先将wiki列表简单分几个大类 技术开发 非核心技术，仅要求了解即可，方便以后随时查询。涉及面应该广一些，包括但不仅限于: 工程规范、开发工具、源码管理、测试方法。 计算机基础 核心技术，需要长期学习和理解的领域，掌握程度高一些。并不奢求一次就能写的多好，要求有更深的理解了，回来补充和修正。至少包括: 开发平台、常用算法、数据结构。 生活学习 其他方向归于这个分类 部署指南 Hexo 官方文档 zthxxx wiki源码 Wikitten 主题地址","tags":[{"name":"wiki","slug":"wiki","permalink":"hinzer.github.io/tags/wiki/"}],"categories":[]},{"title":"年度总结","date":"2019-12-31T15:59:19.000Z","path":"wiki/生活学习-随笔记录-年度总结/","text":"2019年又要到底了，有必要写一个总结，看看过去的一年时间了干了些什么。。另，不知怎么，发现最近变得有些懒散，希望能重拾写作这个习惯。不管怎样，这不是一篇对自我批判或者激励自我的文章，总结记录，仅此而已。 今年跨年在看罗胖演讲时间的朋友，最多听到的是网络、连接、点亮这些字眼，无论是个人、行业、国家，都在积极地对外输出自己的价值(连接)，塑造自己的品牌影响力(网络)。今后是网络化的时代。 对于我而言，如何和别人建立好的连接，结出自己的网络，可能需要想搞清楚几个问题： 我是谁？ 我干啥？ 我为谁干？ 别人需要我么？ 社会更好了么？ 这些问题我想留给下年，下一个年终总结。 过去的2019 过去一年里发生了很多&quot;第一次&quot;，第一次去了杭州合肥这些城市、第一次写年终总结、第一次找工作的过程，经历了社招和校招，也体验过电话面试、现场面试和网络面试，如今第一次实习。 求职 这一年，我最大的期望就是找一份好的工作。在这个过程中，我发现有很多优秀的人、优秀的平台，通过他们的故事和分享，收获了很多实用的建议。 经过2018年，我已经把之前报的嵌入式的课程学的差不多了，随后又补习了Python，3月份左右去考试拿了一个二级证书。 有了找实习的意识，也经历过很多面试。最后有拿到几个实习offer，最后学校没给批，自己也没过于坚持，就没去成。 通过博客认识了几个有意思的小伙伴，有职场人，也有在校同学，收获了很多有用的建议 开始关注牛客网，后来认识了谱哥。这时大三也快结束了，后来找工作的打法也是从谱哥那里学习的。现在已签的offer也是在牛客上找的。 好朋友强哥参加比赛，晋级北京总决赛，团队人员替换，我跟着强哥去北京待了一周，确实是长见识了。 暑假留校学习，完善自己的技术栈。刷剑指offer、网上找内推、投简历，这样坚持一个月。可能感到这样闷头学习没有意思，想出去面试一下，想着以后也要在家乡发展，我订一张火车票就回安徽。在合肥、杭州这些地方转悠一圈，面了十多家公司，有大有小，大多给了offer。这是我今年最正确的决定，后来的面试也有了一定的底气。 开学回到学校，这时发现我是班中唯一一个拿到offer的人，心中一阵窃喜。。后来参加一次网络面试，也就是我现在这家。再后来秋招正式开始也都没怎么参加。 拿到满意offer后，报名了驾考，过了科目一和科目二。 生活 其实在大多时间还是宅在屋里，时间久了，养成一个孤僻的性格，现在多多少少有些抵触与外界的接触。 这一年记录了77篇博客，大多是技术相关的，生活记录有些少了。 办了一张半年的健身卡，坚持每周4天，30min左右活动时间。每次健身之后可以获得身心愉悦，确实不错。 寒假和暑假的时间挺长，真正在家里没过多久。感觉在家里闲不住，想着以后就没有寒暑假了，应该多陪陪家人。 大学里的同学，同一专业的还认识一些。高中同学现在还能常保持联系的也就两个。很多以前关系还不错的朋友，不怎么联络，关系也就慢慢疏远了。 来到东北之后也很少出去走走，对校园之外的世界接触太少。貌似从大三之后就比较宅了，现在实习了。 对现状的思考 大四学生，目前在北京实习，内容是android系统适配，实习还算轻松，但职场上不能很好的适应，仍感到些许压力。 入职 第一次走出校门，进入职场。那天正好是双11，有一个多月了。现在对工作上需要哪些技术，基本上有一个了解。当然还有诸多问题，对自己定位不清晰、目前还没有一个明确的职业规划、所在岗位注重哪些能力，如何针对性的培养等等 性格 或许是出于小时候的成长环境的原因，养成了一个内向的性格。后来，进入大学后，也或许是内向的性格让我选择了学习技术(也可能因为兴趣，但那是之后的事情了),渐渐不与人交流，越来越不善表达了。我始终觉得自己和那些在大学里整天待在宿舍打游戏为了逃避学业，或者整天考研为了逃避就业没什么两样，多少有点逃避的意思。 幸运的是我在学习技术的过程中，有段时间真的体验到了乐趣；不幸的是，社交与沟通能力成为了我最大的短板，比较头疼。 求职找工作那段时间，我感觉比较&quot;充实&quot;,因为当时体会到以前学过的那些知识、技能给我带来的价值。后来进入职场，暴露出自己的社交能力的短板，确实比较难受。 反省 人的本性是在成功时寻找内因，失败了寻找外因。特别是在没有什么可以值得炫耀的时候，总是拒绝面对现实，拒绝反省自己。 其实经历的每一件事都是一次成长的机会，通过总结记录的方式，反思和审视自己。 我是一个&quot;懒人&quot;，平时很少思考，更不愿意去主动总结。大概原因归纳如下： 对事情的理解往往只流于表面，没有深入的理解，也常常感到没有什么值得去写的东西 每次写作的过程中，往往&quot;咬文爵字&quot;，浪费很长时间，会感觉投入产出不成正比 总想利用大块时间一次性写完，但往往没有这种时间，要么贪玩，或者去做别的事情了 针对上面问题的反省，我需要： 最重要的一点，不要搞错总结的目的。总结是给自己看的，每次总结都能提炼出一些有用的东西，这就是总结的价值。 相信持续写下去，文字表述能力自然会提高上去。 养成提问和记录的习惯之后，随时记录考虑的问题，形成主题列表。确定要写的主题，先立大纲，拆分每个部分到碎片时间去实现，利用周末时间拼接起来。 即将到来的2020 期望未来自己，可以协调好学习、工作、生活三者，让生活更加充实。 期望改掉的毛病 [ ] 熬夜 [ ] 懒 [ ] 不善于表达，通常显得冷静而无情 期望养成的习惯 [ ] 早睡早起 [ ] 多进行思考总结，主要方式是记录，经常写日志进行日常总结、写博客进行工作总结 [ ] 必须直接地表达出对他人的欣赏，而不是仅仅保留在内心 [ ] 主动去联系老朋友，至少一个月联系一次嘛 期望达成的目标 [ ] 作息时间 5:10(早)~11:30(晚) [ ] 持续写博客 每周至少产出一篇 [ ] 开始接触金融学 投资、理财、保险… [ ] 多读一些心理学的书，多了解自己 [ ] 坚持健身(久坐生病，需要适当运动)","tags":[{"name":"2019","slug":"2019","permalink":"hinzer.github.io/tags/2019/"}],"categories":[{"name":"生活学习","slug":"生活学习","permalink":"hinzer.github.io/categories/生活学习/"},{"name":"随笔记录","slug":"生活学习/随笔记录","permalink":"hinzer.github.io/categories/生活学习/随笔记录/"}]},{"title":"github收缩开源项目","date":"2019-12-29T11:40:58.000Z","path":"wiki/技术开发-源码管理-github搜索开源项目/","text":"从名字中搜关键词 in:name spring boot 描述中搜索关键词 in:description 微服务 追加限定条件 stars:&gt;3000 # 限定在stars数量大于3000的项目 fork:&gt;50 # fork 数量 language:java # 限定语言 pushed:&gt;2019-09-10 # 最后一次push的时间 参考资料 github官方文档-搜索 如何高效地在网上找开源项目做！在职程序员实际演示一波视频教程","tags":[{"name":"github","slug":"github","permalink":"hinzer.github.io/tags/github/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"hinzer.github.io/categories/技术开发/"},{"name":"源码管理","slug":"技术开发/源码管理","permalink":"hinzer.github.io/categories/技术开发/源码管理/"}]},{"title":"「转」详谈typedef的用法","date":"2019-10-09T23:42:21.000Z","path":"wiki/计算机基础知识-编程语言-typedef理解/","text":"我们都知道typedef是类型重定义，既然是重定义就不可能出现新的数据类型，只是将已有的数据类型进行换个名字而已，但是这有什么用呢？ 可能我们学的时候，给的例子都是：typedef int INT; 然后再用INT去定义一些变量，例如： 12typedef int INT;INT a; 这个就等于int a; 我们当时感觉不出来有什么用，当学到结构体的时候，可能觉得会减少数据类型的写法，像struct student这样一个结构体定义变量的时候如果不用typedef就只能struct student(当然这是在C语言中，在C++中可以省略掉struct直接写student)，这样感觉很麻烦，所以才想到用typedef，但是这是他的用法之一，却不是为唯一的用法。 typedef的用法主要我总结了一下三点： 用法一 可以减少代码的书写量,就像我们经常能考虑到的，结构体这样“新的”数据类型，用typedef可以简化，而且不容易出错.例如: 1234567struct student&#123; int data; char name[10];&#125;; 当我们定义学生结构体的时候要这么定义struct student s1,s2,s3; 如果想定义结构体指针，我们可以这么定义,struct student *ps1, ps2; 显然ps2不是指针类型，但是好多初学者对指针不熟悉，所以容易出错，但是当我们用typedef的时候，就不会出现这样的错误了， 1234567typedef struct student&#123; int data; char name[10];&#125;stu, *pstu; 我们定义的时候可以这么定义stu s1, s2, s3; 定义结构体指针的时候，可以这么定义,pstu ps1, ps2; 这样ps1， ps2都是指针类型的变量 这是typedef的用法之一，也是比较常用的。 用法二 实现代码的复用性和可扩展性,如果一段代码没有扩展性和复用性，那么这段代码就不能算得上是一段特别规范的代码，就像我们为了实现代码的复用性，提高程序可读性的时候，用函数一样，提高代码的复用性和可扩展性是作为软件开发者必备的本领。一段好的代码，如果在别的项目中引用的话，如果功能类似，基本上改不了几行，这就是规范性的重要性(这里先不谈规范性，但是这个typedef的用法也涉及规范性，嘿嘿，所以规范是避免不了的)。就这么来说吧，假如我们定义了一个结构体 1234567struct student&#123; int score; char name[10];&#125;; 我们想把成绩改成double类型的，应为int的精度太低了，但是下面用到的地方可能都要改掉，但是，我们要是用typedef一下， 问题就变得简单多了， 123456789typedef int typeitem；struct student&#123; typeitem score; char name[10];&#125;; 这样直接改typedef就行了，其他的代码根本不用动，这就是分层的原因，我们只改变最底层的，上层的东西根本不用变（就像在链表中，我们可以把它分为三层，纯数据层、节点层、head指针层，也就是整条链)这样分层处理问题会变得简单得多。还有就是平台不同可以兼容，就像有的平台不支持long double类型，但是你如果定义了long double 直接不能用，但是如果这么 typedef long double typeitem； 直接改成可以支持的类型就行啦，根本不用那么麻烦改下面的代码，这也是比较重要的用途。 用法三 简化，提高可读性。想必大家觉得，这个用途不是包含在上面的用途之中了吗，为什么还要再说一遍呢，其实我举个例子你也就明白了，typedef int array[10];，这个代表什么意思，这可不是平时那种array[10]是个int了吧，这个代表，array是个重定义的类型，array a；就代表a是一个含有10个int型元素的数组，这么定义可能觉得简化不了多少，还不如直接int a[10]; 看着明白呢，好! 继续往下看,typedef array Array[5]; 这个呢，如果我这么定义一个变量 Array arr[2]; 这个又是什么意思呢？这个就是定义个Array类型数组，其中这个“一维”数组有两个元素，但是每个元素又都是Array 类型的，每个Array又是一个5行10列二维数组，所以arr就是一个三维数组，他就等于int arr[2][5][10]; 是不是看的有点蒙了， 其实在C语言中根本不存在多维数组，全部都是一维数组，只是一维数组里面又含一维数组，所以才构成了所谓的“多维”数组， 如果这样理解的话，是不是觉得多维数组也就不那么“神奇”了，变得简单了，没有那么晕了，这样定义的好处就是可以讲一个多维的数组转化成我们比较熟悉的一维数组，这样操作起来就比较容易了，可读性自然也会增强。所以这就是他的“简化”的作用。 其实我们还可以在函数指针上体现，想定义个函数指针int (*p)(); 我们可以定义为typedef int (*POWER)(); 接下来可以直接定义POWER p1, p2; 他就等价于int (*p1)(), int (*p2)(); 这样也非常易懂。 定义方法 下面来谈一下他的定义过程，说了这么多，还没讲到怎么定义，其实也就三步: 第一步: 按照定义变量的方法先写出定义体(想必这么都比较熟悉吧), 例如: int a; 第二步: 将变量名换成想要重定义的名字 例如: int INT; 第三步: 在最前面加上typedef 例如: typedef int INT; 整个步骤就完成了，下面就可以用重定义的类型定义变量了:例如: INT a; 就是这么简单，不要想那么复杂。 与宏定义 还有就是与宏定义区分开来，宏定义是在编译预处理的时候直接进行的替换，而typedef却不是，宏定义特别是写那个表达式的时候新手容易出错就是不能真正理解宏替换，就像这么例子: #define mul(a, b) a * b ，如果这么写mul(2, 3)那么恭喜，你对了， 但是如果这么写， mul(2 + 1, 3 + 4); 你的出来的结果一定是错的，它只是简单地替换， 不会像函数那样会先计算出来2 + 1 等于 3 然后在进行计算， 它只能替换为2 + 1 * 3 + 4 所以结果当然错了……新手注意点就好了，这东西挺简单的。 大致就将这么多，如果那里写的不好，多多指教，多多补充！ 转载于：Howe_Young","tags":[{"name":"typedef","slug":"typedef","permalink":"hinzer.github.io/tags/typedef/"},{"name":"C","slug":"C","permalink":"hinzer.github.io/tags/C/"}],"categories":[{"name":"计算机基础知识","slug":"计算机基础知识","permalink":"hinzer.github.io/categories/计算机基础知识/"},{"name":"编程语言","slug":"计算机基础知识/编程语言","permalink":"hinzer.github.io/categories/计算机基础知识/编程语言/"}]}]}